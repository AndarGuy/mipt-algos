/*

*Простые множества*

Простые множества могут содержать в себе элементы перечислимых целых значений
заданного диапазона. Пример: [0..59] или [-128..127]. Их удобно и часто
эффективно реализовывать в виде набора битов с использованием побитовых
операций.

Вам предлагается реализовать такую структуру данных и методы работы с ней.

Для простоты значения элементов множества будут начинаться с нуля и количество
элементов в них будет фиксированным.

Вы должны реализовать структуру struct set и все интерфейсные функции.
*/

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * @brief Создать новое пустое множество, значения элементов которого могут
 * лежать в границах от 0 до capacity-1 включительно. Вернуть указатель на него.
 *
 * @param capacity Максимальная вместимость структуры
 * @return struct set* Указатель на структуру
 */
struct set *set_new(size_t capacity);

/**
 * @brief Добавить во множество s элемент elem. Если элемент существовал,
 * множество не изменится.
 *
 * @param s Указатель на структуру
 * @param elem Элемент, который необходимо добавить в структуру
 * @return int Вернуть 0, если операция корректна, т.е. elem < capacity, иначе
 * вернуть 1.
 */
int set_insert(struct set *s, size_t elem);

/**
 * @brief Удалить элемент из множества. Если элемент не существовал, множество
 * не изменится.
 *
 * @param s Указатель на структуру
 * @param elem Элемент, который необходимо удалить из структуры
 * @return int Вернуть 0, если операция корректна, т.е. elem < capacity, иначе
 * вернуть 1.
 */
int set_erase(struct set *s, size_t elem);

/**
 * @brief Поиск элемента в структуре
 *
 * @param s Указатель на структуру
 * @param elem Элемент, который необходимо найти в структуре
 * @return int Вернуть 1, если элемент присутствует в множестве и 0 в противном
 * случае.
 */
int set_find(struct set const *s, size_t elem);

/**
 * @brief Удалить объект множество и вернуть NULL
 *
 * @param s Указатель на структуру
 * @return struct set* NULL
 */
struct set *set_delete(struct set *s);

/**
 * @brief Предикат: пустая ли структура
 *
 * @param s Указатель на структуру
 * @return int Вернуть единицу, если в множестве есть хотя бы один элемент и
 * ноль в противном случае.
 */
int set_empty(struct set const *s);

/**
 * @brief Получить наименьший элемент, не меньший заданного числа
 *
 * @param s Указатель на структуру
 * @param start Начальный элемент
 * @return ssize_t Вернуть наименьший из элементов множества, не меньших start.
 * Если таких элементов нет (например, множество пустое), то вернуть -1.
 */
ssize_t set_findfirst(struct set const *s, size_t start);

/**
 * @brief Размер структуры
 *
 * @param s Указатель на структуру
 * @return size_t Вернуть количество элементов множества.
 */
size_t set_size(struct set const *s);

/**
 * @brief Вывести на стандартный вывод содержимое множества в формате по
 * образцу: []\n или [1, 2, 3]\n.
 *
 * @param s Указатель на структуру
 */
void set_print(struct set const *s);